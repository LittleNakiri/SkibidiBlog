{
    "version": "https://jsonfeed.org/version/1",
    "title": "SkibidiBlog",
    "description": "",
    "home_page_url": "https://LittleNakiri.github.io/SkibidiBlog",
    "feed_url": "https://LittleNakiri.github.io/SkibidiBlog/feed.json",
    "user_comment": "",
    "author": {
        "name": "Ninh Khắc Duy"
    },
    "items": [
        {
            "id": "https://LittleNakiri.github.io/SkibidiBlog/bao-ve-doi-tuong-javascript.html",
            "url": "https://LittleNakiri.github.io/SkibidiBlog/bao-ve-doi-tuong-javascript.html",
            "title": "Bảo vệ đối tượng JavaScript",
            "summary": "Phương pháp bảo vệ đối tượng // Prevents re-assignment const car = {type:\"Fiat\",&hellip;",
            "content_html": "<h2><span>Phương pháp bảo vệ đối tượng</span></h2>\n<div class=\"w3-example\">\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Prevents re-assignment<br></span><span class=\"jskeywordcolor\">const</span> car = {type:<span class=\"jsstringcolor\">\"Fiat\"</span>, model:<span class=\"jsstringcolor\">\"500\"</span>, color:<span class=\"jsstringcolor\">\"white\"</span>};<br><br><span class=\"commentcolor\">// Prevents adding object properties<br></span>Object.<span class=\"jspropertycolor\">preventExtensions</span>(object)<br><br><span class=\"commentcolor\">// Returns true if properties can be added to an object<br></span>Object.<span class=\"jspropertycolor\">isExtensible</span>(object)<br><br><span class=\"commentcolor\">// Prevents adding and deleting object properties<br></span>Object.<span class=\"jspropertycolor\">seal</span>(object)<br><br><span class=\"commentcolor\">// Returns true if object is sealed<br></span>Object.<span class=\"jspropertycolor\">isSealed</span>(object)<br><br><span class=\"commentcolor\">// Prevents any changes to an object<br></span>Object.<span class=\"jspropertycolor\">freeze</span>(object)<br><br><span class=\"commentcolor\">// Returns true if object is frozen<br></span>Object.<span class=\"jspropertycolor\">isFrozen</span>(object)</span></div>\n</div>\n<hr>\n<h2><span>Sử dụng const</span></h2>\n<p><span>Cách phổ biến nhất để bảo vệ một đối tượng khỏi bị thay đổi là sử dụng </span><code class=\"w3-codespan\">const</code><span>từ khóa.</span></p>\n<p><span>Bạn </span><code class=\"w3-codespan\">const</code><span>không thể gán lại đối tượng, nhưng vẫn có thể thay đổi giá trị của thuộc tính, xóa thuộc tính hoặc tạo thuộc tính mới.</span></p>\n<hr>\n<h2><span>Đối tượng JavaScript.preventExtensions()</span></h2>\n<p><span>Phương pháp này </span><code class=\"w3-codespan\">Object.preventExtensions()</code><span>ngăn chặn việc thêm thuộc tính vào đối tượng.</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Create Object<br></span><span class=\"jskeywordcolor\">const</span> person = {firstName:<span class=\"jsstringcolor\">\"John\"</span>, lastName:<span class=\"jsstringcolor\">\"Doe\"</span>};<br><br><span class=\"commentcolor\">// Prevent Extensions<br></span>Object.<span class=\"jspropertycolor\">preventExtensions</span>(person);<br><br><span class=\"commentcolor\">// This will throw an error<br></span>person.<span class=\"jspropertycolor\">nationality</span> = <span class=\"jsstringcolor\">\"English\"</span>;</span></div>\n</div>\n<p><span>Vì mảng là đối tượng nên mảng cũng có thể được ngăn không cho mở rộng:</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Create Array<br></span><span class=\"jskeywordcolor\">const</span> fruits = [<span class=\"jsstringcolor\">\"Banana\"</span>, <span class=\"jsstringcolor\">\"Orange\"</span>, <span class=\"jsstringcolor\">\"Apple\"</span>, <span class=\"jsstringcolor\">\"Mango\"</span>];<br>Object.<span class=\"jspropertycolor\">preventExtensions</span>(fruits);<br><br><span class=\"commentcolor\">// This will throw an error:<br></span>fruits.<span class=\"jspropertycolor\">push</span>(<span class=\"jsstringcolor\">\"Kiwi\"</span>);</span></div>\n</div>\n<hr>\n<h2><span>Đối tượng JavaScript.isExtensible()</span></h2>\n<p><span>Bạn có thể sử dụng </span><code class=\"w3-codespan\">Object.isExtensible()</code><span>để kiểm tra xem một đối tượng có thể mở rộng được hay không.</span></p>\n<p><span>Trả </span><code class=\"w3-codespan\">Object.isExtensible()</code><span>về true nếu đối tượng có thể mở rộng.</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Create Object<br></span><span class=\"jskeywordcolor\">const</span> person = {firstName:<span class=\"jsstringcolor\">\"John\"</span>, lastName:<span class=\"jsstringcolor\">\"Doe\"</span>};<br><br><span class=\"commentcolor\">// Prevent Extensions<br></span>Object.<span class=\"jspropertycolor\">preventExtensions</span>(person);<br><br><span class=\"commentcolor\">// This will return false<br></span><span class=\"jskeywordcolor\">let</span> answer = Object.<span class=\"jspropertycolor\">isExtensible</span>(person);</span></div>\n<br>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Create Array<br></span><span class=\"jskeywordcolor\">const</span> fruits = [<span class=\"jsstringcolor\">\"Banana\"</span>, <span class=\"jsstringcolor\">\"Orange\"</span>, <span class=\"jsstringcolor\">\"Apple\"</span>, <span class=\"jsstringcolor\">\"Mango\"</span>];<br><br><span class=\"commentcolor\">// Prevent Extensions<br></span>Object.<span class=\"jspropertycolor\">preventExtensions</span>(fruits);<br><br><span class=\"commentcolor\">// This will return false<br></span><span class=\"jskeywordcolor\">let</span> answer = Object.<span class=\"jspropertycolor\">isExtensible</span>(fruits);</span></div>\n</div>\n<hr>\n<h2><span>Đối tượng JavaScript.seal()</span></h2>\n<p><span>Phương pháp này </span><code class=\"w3-codespan\">Object.seal()</code><span>ngăn chặn việc thêm hoặc xóa các thuộc tính mới.</span></p>\n<p><span>Phương pháp này </span><code class=\"w3-codespan\">Object.seal()</code><span>khiến các thuộc tính hiện có không thể cấu hình được.</span></p>\n<p><span>Phương pháp này </span><code class=\"w3-codespan\">Object.isSealed()</code><span>có thể được sử dụng để kiểm tra xem một vật thể có được niêm phong hay không.</span></p>\n<div class=\"w3-note\">\n<h2><span>Ghi chú</span></h2>\n<p><span>Phương pháp này </span><code class=\"w3-codespan\">Object.seal()</code><span>sẽ không hoạt động ở chế độ không nghiêm ngặt và sẽ báo lỗi TypeError ở chế độ nghiêm ngặt.</span></p>\n</div>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"jsstringcolor\">\"use strict\"</span><br><span class=\"commentcolor\">// Create Object<br></span><span class=\"jskeywordcolor\">const</span> person = {<br>  firstName: <span class=\"jsstringcolor\">\"John\"</span>,<br>  lastName: <span class=\"jsstringcolor\">\"Doe\"</span>,<br>  age: <span class=\"jsnumbercolor\">50</span>,<br>  eyeColor: <span class=\"jsstringcolor\">\"blue\"</span><br>};<br><br><span class=\"commentcolor\">// Seal Object<br></span>Object.<span class=\"jspropertycolor\">seal</span>(person)<br><br><span class=\"commentcolor\">// This will throw an error<br></span><span class=\"jskeywordcolor\">delete</span> person.<span class=\"jspropertycolor\">age</span>;</span></div>\n</div>\n<p><span>Vì mảng là đối tượng nên mảng cũng có thể được niêm phong:</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Create Array<br></span><span class=\"jskeywordcolor\">const</span> fruits = [<span class=\"jsstringcolor\">\"Banana\"</span>, <span class=\"jsstringcolor\">\"Orange\"</span>, <span class=\"jsstringcolor\">\"Apple\"</span>, <span class=\"jsstringcolor\">\"Mango\"</span>];<br>Object.<span class=\"jspropertycolor\">seal</span>(fruits);<br><br><span class=\"commentcolor\">// This will throw an error:<br></span>fruits.<span class=\"jspropertycolor\">push</span>(<span class=\"jsstringcolor\">\"Kiwi\"</span>);</span></div>\n</div>\n<hr>\n<h2><span>Đối tượng JavaScript.isSealed()</span></h2>\n<p><span>Phương pháp này </span><code class=\"w3-codespan\">Object.isSealed()</code><span>có thể được sử dụng để kiểm tra xem một vật thể có được niêm phong hay không.</span></p>\n<p><span>Trả </span><code class=\"w3-codespan\">Object.isSealed()</code><span>về giá trị true nếu đối tượng được niêm phong.</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Create Object<br></span><span class=\"jskeywordcolor\">const</span> person = {firstName:<span class=\"jsstringcolor\">\"John\"</span>, lastName:<span class=\"jsstringcolor\">\"Doe\"</span>};<br><br><span class=\"commentcolor\">// Seal Object<br></span>Object.<span class=\"jspropertycolor\">seal</span>(person);<br><br><span class=\"commentcolor\">// This will return true<br></span><span class=\"jskeywordcolor\">let</span> answer = Object.<span class=\"jspropertycolor\">isSealed</span>(person);</span></div>\n<br>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Create Array<br></span><span class=\"jskeywordcolor\">const</span> fruits = [<span class=\"jsstringcolor\">\"Banana\"</span>, <span class=\"jsstringcolor\">\"Orange\"</span>, <span class=\"jsstringcolor\">\"Apple\"</span>, <span class=\"jsstringcolor\">\"Mango\"</span>];<br><br><span class=\"commentcolor\">// Seal Array<br></span>Object.<span class=\"jspropertycolor\">seal</span>(fruits);<br><br><span class=\"commentcolor\">// This will return true<br></span><span class=\"jskeywordcolor\">let</span> answer = Object.<span class=\"jspropertycolor\">isSealed</span>(fruits);</span></div>\n</div>\n<hr>\n<h2><span>Đối tượng JavaScript.freeze()</span></h2>\n<p><span>Phương pháp này </span><code class=\"w3-codespan\">Object.freeze()</code><span>ngăn chặn mọi thay đổi đối với một đối tượng.</span></p>\n<p><span>Các đối tượng bị đóng băng chỉ có thể đọc.</span></p>\n<p><span>Không được phép sửa đổi, thêm hoặc xóa bất kỳ thuộc tính nào.</span></p>\n<div class=\"w3-note\">\n<h2><span>Ghi chú</span></h2>\n<p><span>Phương pháp này </span><code class=\"w3-codespan\">Object.freeze()</code><span>sẽ không hoạt động ở chế độ không nghiêm ngặt và sẽ báo lỗi TypeError ở chế độ nghiêm ngặt.</span></p>\n</div>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"jsstringcolor\">\"use strict\"</span><br><span class=\"commentcolor\">// Create Object<br></span><span class=\"jskeywordcolor\">const</span> person = {<br>  firstName: <span class=\"jsstringcolor\">\"John\"</span>,<br>  lastName: <span class=\"jsstringcolor\">\"Doe\"</span>,<br>  age: <span class=\"jsnumbercolor\">50</span>,<br>  eyeColor: <span class=\"jsstringcolor\">\"blue\"</span><br>};<br><br><span class=\"commentcolor\">// Freeze Object<br></span>Object.<span class=\"jspropertycolor\">freeze</span>(person)<br><br><span class=\"commentcolor\">// This will throw an error<br></span>person.<span class=\"jspropertycolor\">age</span> = <span class=\"jsnumbercolor\">51</span>;</span></div>\n</div>\n<p><span>Vì mảng là đối tượng nên mảng cũng có thể bị đóng băng:</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"jskeywordcolor\">const</span> fruits = [<span class=\"jsstringcolor\">\"Banana\"</span>, <span class=\"jsstringcolor\">\"Orange\"</span>, <span class=\"jsstringcolor\">\"Apple\"</span>, <span class=\"jsstringcolor\">\"Mango\"</span>];<br>Object.<span class=\"jspropertycolor\">freeze</span>(fruits);<br><br><span class=\"commentcolor\">// This will trow an error:<br></span>fruits.<span class=\"jspropertycolor\">push</span>(<span class=\"jsstringcolor\">\"Kiwi\"</span>);</span></div>\n</div>\n<hr>\n<h2><span>Đối tượng JavaScript.isFrozen()</span></h2>\n<p><span>Phương pháp này </span><code class=\"w3-codespan\">Object.isFrozen()</code><span>có thể được sử dụng để kiểm tra xem một vật thể có bị đóng băng hay không.</span></p>\n<p><span>Trả </span><code class=\"w3-codespan\">Object.isFrozen()</code><span>về giá trị true nếu đối tượng bị đóng băng.</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Create Object<br></span><span class=\"jskeywordcolor\">const</span> person = {firstName:<span class=\"jsstringcolor\">\"John\"</span>, lastName:<span class=\"jsstringcolor\">\"Doe\"</span>};<br><br><span class=\"commentcolor\">// Freeze Object<br></span>Object.<span class=\"jspropertycolor\">freeze</span>(person);<br><br><span class=\"commentcolor\">// This will return true<br></span><span class=\"jskeywordcolor\">let</span> answer = Object.<span class=\"jspropertycolor\">isFrozen</span>(person);</span></div>\n<br>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Create Array<br></span><span class=\"jskeywordcolor\">const</span> fruits = [<span class=\"jsstringcolor\">\"Banana\"</span>, <span class=\"jsstringcolor\">\"Orange\"</span>, <span class=\"jsstringcolor\">\"Apple\"</span>, <span class=\"jsstringcolor\">\"Mango\"</span>];<br>Object.<span class=\"jspropertycolor\">freeze</span>(fruits);<br><br><span class=\"commentcolor\">// This will return true:<br></span><span class=\"jskeywordcolor\">let</span> answer = Object.<span class=\"jspropertycolor\">isFrozen</span>(fruits);</span></div>\n</div>\n<hr>\n<div class=\"w3-note\">\n<h2><span>Tham chiếu đối tượng đầy đủ</span></h2>\n<p><span>Để có thông tin tham khảo đầy đủ, hãy truy cập:</span></p>\n<p><span>Tài liệu tham khảo này chứa các mô tả và ví dụ về tất cả Thuộc tính và Phương thức của Đối tượng.</span></p>\n</div>",
            "image": "https://LittleNakiri.github.io/SkibidiBlog/media/posts/10/1_bgcutrYqFA7HBsIwYjPPJw.jpg",
            "author": {
                "name": "Ninh Khắc Duy"
            },
            "tags": [
            ],
            "date_published": "2024-12-30T23:36:03+07:00",
            "date_modified": "2024-12-30T23:36:03+07:00"
        },
        {
            "id": "https://LittleNakiri.github.io/SkibidiBlog/bo-truy-cap-doi-tuong-javascript.html",
            "url": "https://LittleNakiri.github.io/SkibidiBlog/bo-truy-cap-doi-tuong-javascript.html",
            "title": "Bộ truy cập đối tượng JavaScript",
            "summary": "Bộ truy cập JavaScript (Getters và Setters) ECMAScript 5 (ES5 2009) giới&hellip;",
            "content_html": "<h2><span>Bộ truy cập JavaScript (Getters và Setters)</span></h2>\n<p><span>ECMAScript 5 (ES5 2009) giới thiệu Getter và Setter.</span></p>\n<p><span>Các phương thức getter và setter cho phép bạn xác định Object Accessor (Computed Properties).</span></p>\n<hr>\n<h2><span>JavaScript Getter (Từ khóa get)</span></h2>\n<p><span>Ví dụ này sử dụng một </span><code class=\"w3-codespan\">lang</code><span>thuộc tính cho </span><code class=\"w3-codespan\">get</code><span> giá trị của </span><code class=\"w3-codespan\">language</code><span>thuộc tính đó.</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Create an object:<br></span><span class=\"jskeywordcolor\">const</span> person = {<br>  firstName: <span class=\"jsstringcolor\">\"John\"</span>,<br>  lastName: <span class=\"jsstringcolor\">\"Doe\"</span>,<br>  language: <span class=\"jsstringcolor\">\"en\"</span>,<br>  get lang() {<br>    <span class=\"jskeywordcolor\">return</span> <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">language</span>;<br>  }<br>};<br><br><span class=\"commentcolor\">// Display data from the object using a getter:<br></span>document.<span class=\"jspropertycolor\">getElementById</span>(<span class=\"jsstringcolor\">\"demo\"</span>).<span class=\"jspropertycolor\">innerHTML</span> = person.<span class=\"jspropertycolor\">lang</span>;</span></div>\n</div>\n<hr>\n<h2><span>JavaScript Setter (Từ khóa set)</span></h2>\n<p><span>Ví dụ này sử dụng một </span><code class=\"w3-codespan\">lang</code><span>thuộc tính cho </span><code class=\"w3-codespan\">set</code><span> giá trị của </span><code class=\"w3-codespan\">language</code><span>thuộc tính đó.</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"jskeywordcolor\">const</span> person = {<br>  firstName: <span class=\"jsstringcolor\">\"John\"</span>,<br>  lastName: <span class=\"jsstringcolor\">\"Doe\"</span>,<br>  language: <span class=\"jsstringcolor\">\"\"</span>,<br>  set lang(lang) {<br>    <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">language</span> = lang;<br>  }<br>};<br><br><span class=\"commentcolor\">// Set an object property using a setter:<br></span>person.<span class=\"jspropertycolor\">lang</span> = <span class=\"jsstringcolor\">\"en\"</span>;<br><br><span class=\"commentcolor\">// Display data from the object:<br></span>document.<span class=\"jspropertycolor\">getElementById</span>(<span class=\"jsstringcolor\">\"demo\"</span>).<span class=\"jspropertycolor\">innerHTML</span> = person.<span class=\"jspropertycolor\">language</span>;</span></div>\n</div>\n<div id=\"midcontentadcontainer\">\n<div id=\"adngin-mid_content-0\" data-google-query-id=\"CIGT0a_1z4oDFWuqZgIdW4EAuQ\">\n<div id=\"sn_ad_label_adngin-mid_content-0\" class=\"sn_ad_label\"></div>\n</div>\n</div>\n<hr>\n<h2><span>Hàm JavaScript hay Getter?</span></h2>\n<p><span>Sự khác biệt giữa hai ví dụ này là gì?</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ 1</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"jskeywordcolor\">const</span> person = {<br>  firstName: <span class=\"jsstringcolor\">\"John\"</span>,<br>  lastName: <span class=\"jsstringcolor\">\"Doe\"</span>,<br>  fullName: <span class=\"jskeywordcolor\">function</span>() {<br>    <span class=\"jskeywordcolor\">return</span> <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">firstName</span> + <span class=\"jsstringcolor\">\" \"</span> + <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">lastName</span>;<br>  }<br>};<br><br><span class=\"commentcolor\">// Display data from the object using a method:<br></span>document.<span class=\"jspropertycolor\">getElementById</span>(<span class=\"jsstringcolor\">\"demo\"</span>).<span class=\"jspropertycolor\">innerHTML</span> = person.<span class=\"jspropertycolor\">fullName</span>();</span></div>\n</div>\n<div class=\"w3-example\">\n<h3><span>Ví dụ 2</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"jskeywordcolor\">const</span> person = {<br>  firstName: <span class=\"jsstringcolor\">\"John\"</span>,<br>  lastName: <span class=\"jsstringcolor\">\"Doe\"</span>,<br>  get fullName() {<br>    <span class=\"jskeywordcolor\">return</span> <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">firstName</span> + <span class=\"jsstringcolor\">\" \"</span> + <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">lastName</span>;<br>  }<br>};<br><br><span class=\"commentcolor\">// Display data from the object using a getter:<br></span>document.<span class=\"jspropertycolor\">getElementById</span>(<span class=\"jsstringcolor\">\"demo\"</span>).<span class=\"jspropertycolor\">innerHTML</span> = person.<span class=\"jspropertycolor\">fullName</span>;</span></div>\n</div>\n<p><span>Ví dụ 1 truy cập fullName dưới dạng hàm: person.fullName().</span></p>\n<p><span>Ví dụ 2 truy cập fullName dưới dạng thuộc tính: person.fullName.</span></p>\n<p><span>Ví dụ thứ hai cung cấp cú pháp đơn giản hơn.</span></p>\n<hr>\n<h2><span>Chất lượng dữ liệu</span></h2>\n<p><span>JavaScript có thể đảm bảo chất lượng dữ liệu tốt hơn khi sử dụng phương thức getter và setter.</span></p>\n<p><span>Trong ví dụ này, sử dụng </span><code class=\"w3-codespan\">lang</code><span>thuộc tính này sẽ trả về giá trị của </span><code class=\"w3-codespan\">language</code><span>thuộc tính ở dạng chữ in hoa:</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Create an object:<br></span><span class=\"jskeywordcolor\">const</span> person = {<br>  firstName: <span class=\"jsstringcolor\">\"John\"</span>,<br>  lastName: <span class=\"jsstringcolor\">\"Doe\"</span>,<br>  language: <span class=\"jsstringcolor\">\"en\"</span>,<br>  get lang() {<br>    <span class=\"jskeywordcolor\">return</span> <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">language</span>.<span class=\"jspropertycolor\">toUpperCase</span>();<br>  }<br>};<br><br><span class=\"commentcolor\">// Display data from the object using a getter:<br></span>document.<span class=\"jspropertycolor\">getElementById</span>(<span class=\"jsstringcolor\">\"demo\"</span>).<span class=\"jspropertycolor\">innerHTML</span> = person.<span class=\"jspropertycolor\">lang</span>;</span></div>\n</div>\n<p><span>Trong ví dụ này, sử dụng </span><code class=\"w3-codespan\">lang</code><span>thuộc tính này sẽ lưu trữ giá trị chữ hoa trong </span><code class=\"w3-codespan\">language</code><span>thuộc tính:</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"jskeywordcolor\">const</span> person = {<br>  firstName: <span class=\"jsstringcolor\">\"John\"</span>,<br>  lastName: <span class=\"jsstringcolor\">\"Doe\"</span>,<br>  language: <span class=\"jsstringcolor\">\"\"</span>,<br>  set lang(lang) {<br>    <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">language</span> = lang.<span class=\"jspropertycolor\">toUpperCase</span>();<br>  }<br>};<br><br><span class=\"commentcolor\">// Set an object property using a setter:<br></span>person.<span class=\"jspropertycolor\">lang</span> = <span class=\"jsstringcolor\">\"en\"</span>;<br><br><span class=\"commentcolor\">// Display data from the object:<br></span>document.<span class=\"jspropertycolor\">getElementById</span>(<span class=\"jsstringcolor\">\"demo\"</span>).<span class=\"jspropertycolor\">innerHTML</span> = person.<span class=\"jspropertycolor\">language</span>;</span></div>\n</div>\n<hr>\n<h2><span>Tại sao sử dụng Getter và Setter?</span></h2>\n<ul>\n<li><span>Nó cung cấp cú pháp đơn giản hơn</span></li>\n<li><span>Nó cho phép cú pháp bình đẳng cho các thuộc tính và phương thức</span></li>\n<li><span>Nó có thể đảm bảo chất lượng dữ liệu tốt hơn</span></li>\n<li><span>Nó hữu ích cho việc thực hiện những việc hậu trường</span></li>\n</ul>\n<hr>\n<h2><span>Đối tượng.defineProperty()</span></h2>\n<p><span>Phương pháp này </span><code class=\"w3-codespan\">Object.defineProperty()</code><span>cũng có thể được sử dụng để thêm Getter và Setter:</span></p>\n<div class=\"w3-example\">\n<h3><span>Một ví dụ phản biện</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Define object<br></span><span class=\"jskeywordcolor\">const</span> obj = {counter : <span class=\"jsnumbercolor\">0</span>};<br><br><span class=\"commentcolor\">// Define setters and getters<br></span>Object.<span class=\"jspropertycolor\">defineProperty</span>(obj, <span class=\"jsstringcolor\">\"reset\"</span>, {<br>  get : <span class=\"jskeywordcolor\">function</span> () {<span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">counter</span> = <span class=\"jsnumbercolor\">0</span>;}<br>});<br>Object.<span class=\"jspropertycolor\">defineProperty</span>(obj, <span class=\"jsstringcolor\">\"increment\"</span>, {<br>  get : <span class=\"jskeywordcolor\">function</span> () {<span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">counter</span>++;}<br>});<br>Object.<span class=\"jspropertycolor\">defineProperty</span>(obj, <span class=\"jsstringcolor\">\"decrement\"</span>, {<br>  get : <span class=\"jskeywordcolor\">function</span> () {<span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">counter</span>--;}<br>});<br>Object.<span class=\"jspropertycolor\">defineProperty</span>(obj, <span class=\"jsstringcolor\">\"add\"</span>, {<br>  set : <span class=\"jskeywordcolor\">function</span> (value) {<span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">counter</span> += value;}<br>});<br>Object.<span class=\"jspropertycolor\">defineProperty</span>(obj, <span class=\"jsstringcolor\">\"subtract\"</span>, {<br>  set : <span class=\"jskeywordcolor\">function</span> (value) {<span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">counter</span> -= value;}<br>});<br><br><span class=\"commentcolor\">// Play with the counter:<br></span>obj.<span class=\"jspropertycolor\">reset</span>;<br>obj.<span class=\"jspropertycolor\">add</span> = <span class=\"jsnumbercolor\">5</span>;<br>obj.<span class=\"jspropertycolor\">subtract</span> = <span class=\"jsnumbercolor\">1</span>;<br>obj.<span class=\"jspropertycolor\">increment</span>;<br>obj.<span class=\"jspropertycolor\">decrement</span>;<br></span></div>\n</div>\n<hr>\n<div class=\"w3-note\">\n<h2><span>Tham chiếu đối tượng đầy đủ</span></h2>\n<p><span>Để có thông tin tham khảo đầy đủ, hãy truy cập:</span></p>\n<p><span>Tài liệu tham khảo này chứa các mô tả và ví dụ về tất cả Thuộc tính và Phương thức của Đối tượng.</span></p>\n</div>",
            "image": "https://LittleNakiri.github.io/SkibidiBlog/media/posts/9/hq720-1.jpg",
            "author": {
                "name": "Ninh Khắc Duy"
            },
            "tags": [
            ],
            "date_published": "2024-12-30T23:33:12+07:00",
            "date_modified": "2024-12-30T23:33:12+07:00"
        },
        {
            "id": "https://LittleNakiri.github.io/SkibidiBlog/thuoc-tinh-doi-tuong-javascript.html",
            "url": "https://LittleNakiri.github.io/SkibidiBlog/thuoc-tinh-doi-tuong-javascript.html",
            "title": "Thuộc tính đối tượng JavaScript",
            "summary": "Phương pháp quản lý tài sản // Adding or changing an object&hellip;",
            "content_html": "<h2><span>Phương pháp quản lý tài sản</span></h2>\n<div class=\"w3-example\">\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Adding or changing an object property<br></span>Object.<span class=\"jspropertycolor\">defineProperty</span>(object, property, descriptor)<br><br><span class=\"commentcolor\">// Adding or changing object properties<br></span>Object.<span class=\"jspropertycolor\">defineProperties</span>(object, descriptors)<br><br><span class=\"commentcolor\">// Accessing a Property<br></span>Object.<span class=\"jspropertycolor\">getOwnPropertyDescriptor</span>(object, property)<br><br><span class=\"commentcolor\">// Accessing Properties<br></span>Object.<span class=\"jspropertycolor\">getOwnPropertyDescriptors</span>(object)<br><br><span class=\"commentcolor\">// Returns all properties as an array<br></span>Object.<span class=\"jspropertycolor\">getOwnPropertyNames</span>(object)<br><br><span class=\"commentcolor\">// Accessing the prototype<br></span>Object.<span class=\"jspropertycolor\">getPrototypeOf</span>(object)<br></span></div>\n</div>\n<hr>\n<h2><span>Đối tượng JavaScript.defineProperty()</span></h2>\n<p><span>Phương pháp này </span><code class=\"w3-codespan\">Object.defineProperty()</code><span>có thể được sử dụng để:</span></p>\n<ul>\n<li><span>Thêm một thuộc tính mới vào một đối tượng</span></li>\n<li><span>Thay đổi giá trị thuộc tính</span></li>\n<li><span>Thay đổi siêu dữ liệu thuộc tính</span></li>\n<li><span>Thay đổi các đối tượng getter và setter</span></li>\n</ul>\n<p><span>Cú pháp:</span></p>\n<div class=\"w3-code w3-border notranslate\">Object.defineProperty(<i>object, property, descriptor</i>)</div>\n<hr>\n<h2><span>Thêm một Thuộc tính mới</span></h2>\n<p><span>Ví dụ này thêm một thuộc tính mới vào một đối tượng:</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Create an Object:<br></span><span class=\"jskeywordcolor\">const</span> person = {<br>  firstName: <span class=\"jsstringcolor\">\"John\"</span>,<br>  lastName : <span class=\"jsstringcolor\">\"Doe\"</span>,<br>  language : <span class=\"jsstringcolor\">\"EN\"</span><br>};<br><br><span class=\"commentcolor\">// Add a Property<br></span>Object.<span class=\"jspropertycolor\">defineProperty</span>(person, <span class=\"jsstringcolor\">\"year\"</span>, {value:<span class=\"jsstringcolor\">\"2008\"</span>});</span></div>\n</div>\n<hr>\n<h2><span>Thay đổi giá trị thuộc tính</span></h2>\n<p><span>Ví dụ này thay đổi giá trị thuộc tính:</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Create an Object:<br></span><span class=\"jskeywordcolor\">const</span> person = {<br>  firstName: <span class=\"jsstringcolor\">\"John\"</span>,<br>  lastName : <span class=\"jsstringcolor\">\"Doe\"</span>,<br>  language : <span class=\"jsstringcolor\">\"EN\"</span><br>};<br><br><span class=\"commentcolor\">// Change a Property<br></span>Object.<span class=\"jspropertycolor\">defineProperty</span>(person, <span class=\"jsstringcolor\">\"language\"</span>, {value : <span class=\"jsstringcolor\">\"NO\"</span>});</span></div>\n</div>\n<hr>\n<h2><span>Thuộc tính của tài sản</span></h2>\n<p><span>Tất cả các thuộc tính đều có tên. Ngoài ra chúng còn có giá trị.</span></p>\n<p><span>Giá trị là một trong những thuộc tính của tài sản.</span></p>\n<p><span>Các thuộc tính khác bao gồm: có thể đếm được, có thể cấu hình và có thể ghi.</span></p>\n<p><span>Các thuộc tính này xác định cách thức truy cập vào thuộc tính (có thể đọc được không?, có thể ghi không?)</span></p>\n<p><span>Trong JavaScript, tất cả các thuộc tính đều có thể đọc được, nhưng chỉ có thuộc tính giá trị có thể thay đổi (và chỉ khi thuộc tính đó có thể ghi được).</span></p>\n<p><span>(ECMAScript 5 có các phương thức để lấy và thiết lập tất cả các thuộc tính)</span></p>\n<hr>\n<h2><span>Thay đổi siêu dữ liệu</span></h2>\n<p><span>Siêu dữ liệu thuộc tính sau đây có thể được thay đổi:</span></p>\n<div class=\"w3-example\">\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\">writable : <span class=\"jskeywordcolor\">true</span>      <span class=\"commentcolor\">// Property value can be changed<br></span>enumerable : <span class=\"jskeywordcolor\">true</span>    <span class=\"commentcolor\">// Property can be enumerated<br></span>configurable : <span class=\"jskeywordcolor\">true</span>  <span class=\"commentcolor\">// Property can be reconfigured</span></span></div>\n</div>\n<div class=\"w3-example\">\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\">writable : <span class=\"jskeywordcolor\">false</span>     <span class=\"commentcolor\">// Property value can not be changed<br></span>enumerable : <span class=\"jskeywordcolor\">false</span>   <span class=\"commentcolor\">// Property can be not enumerated<br></span>configurable : <span class=\"jskeywordcolor\">false</span> <span class=\"commentcolor\">// Property can be not reconfigured</span></span></div>\n</div>\n<p><span>Các phương thức getter và setter cũng có thể được thay đổi:</span></p>\n<div class=\"w3-example\">\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Defining a getter<br></span>get: <span class=\"jskeywordcolor\">function</span>() { <span class=\"jskeywordcolor\">return</span> language }<br><span class=\"commentcolor\">// Defining a setter<br></span>set: <span class=\"jskeywordcolor\">function</span>(value) { language = value }</span></div>\n</div>\n<p><span>Ví dụ này làm cho ngôn ngữ chỉ đọc:</span></p>\n<div class=\"w3-example\">\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\">Object.<span class=\"jspropertycolor\">defineProperty</span>(person, <span class=\"jsstringcolor\">\"language\"</span>, {writable:<span class=\"jskeywordcolor\">false</span>});</span></div>\n</div>\n<p><span>Ví dụ này làm cho ngôn ngữ không thể đếm được:</span></p>\n<div class=\"w3-example\">\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\">Object.<span class=\"jspropertycolor\">defineProperty</span>(person, <span class=\"jsstringcolor\">\"language\"</span>, {enumerable:<span class=\"jskeywordcolor\">false</span>});</span></div>\n</div>\n<div id=\"midcontentadcontainer\">\n<div id=\"adngin-mid_content-0\" data-google-query-id=\"CMCU8oP0z4oDFXpKnQkdQf43-A\">\n<div id=\"sn_ad_label_adngin-mid_content-0\" class=\"sn_ad_label\"></div>\n</div>\n</div>\n<hr>\n<h2><span>JavaScript getOwnPropertyNames()</span></h2>\n<p><span>Phương pháp này </span><code class=\"w3-codespan\">Object.getOwnPropertyNames()</code><span>có thể:</span></p>\n<ul>\n<li><span>Liệt kê các thuộc tính của đối tượng</span></li>\n</ul>\n<h3><span>Cú pháp</span></h3>\n<div class=\"w3-code w3-border notranslate\">Object.getOwnPropertyNames(<i>object</i>)</div>\n<hr>\n<h2><span>Liệt kê tất cả các thuộc tính đối tượng</span></h2>\n<p><span>Ví dụ này lấy tất cả các thuộc tính của một đối tượng:</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Create an Object<br></span><span class=\"jskeywordcolor\">const</span> person = {<br>  firstName: <span class=\"jsstringcolor\">\"John\"</span>,<br>  lastName : <span class=\"jsstringcolor\">\"Doe\"</span>,<br>  language : <span class=\"jsstringcolor\">\"EN\"</span><br>};<br><br><span class=\"commentcolor\">// Get all Properties<br></span>Object.<span class=\"jspropertycolor\">getOwnPropertyNames</span>(person);</span></div>\n</div>\n<p><code class=\"w3-codespan\">Object.getOwnPropertyNames()</code><span>cũng sẽ liệt kê các thuộc tính không thể liệt kê được:</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Create an Object<br></span><span class=\"jskeywordcolor\">const</span> person = {<br>  firstName: <span class=\"jsstringcolor\">\"John\"</span>,<br>  lastName : <span class=\"jsstringcolor\">\"Doe\"</span>,<br>  language : <span class=\"jsstringcolor\">\"EN\"</span><br>};<br><br><span class=\"commentcolor\">// Set the language Property not enumerable<br></span>Object.<span class=\"jspropertycolor\">defineProperty</span>(person, <span class=\"jsstringcolor\">\"language\"</span>, {enumerable:<span class=\"jskeywordcolor\">false</span>});<br><br><span class=\"commentcolor\">// Get all Properties<br></span>Object.<span class=\"jspropertycolor\">getOwnPropertyNames</span>(person);</span></div>\n</div>\n<hr>\n<h2><span>Đối tượng JavaScript.keys()</span></h2>\n<p><span>Phương pháp này </span><code class=\"w3-codespan\">Object.keys()</code><span>có thể:</span></p>\n<ul>\n<li><span>Liệt kê các thuộc tính của đối tượng có thể đếm được</span></li>\n</ul>\n<h3><span>Cú pháp</span></h3>\n<div class=\"w3-code w3-border notranslate\">Object.keys(<i>object</i>)</div>\n<hr>\n<h2><span>Liệt kê các thuộc tính của đối tượng có thể đếm được</span></h2>\n<p><span>Ví dụ này sử dụng </span><code class=\"w3-codespan\">Object.keys()</code><span>insted của </span><code class=\"w3-codespan\">Object.getOwnPropertyNames()</code><span>:</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Create an Object<br></span><span class=\"jskeywordcolor\">const</span> person = {<br>  firstName: <span class=\"jsstringcolor\">\"John\"</span>,<br>  lastName : <span class=\"jsstringcolor\">\"Doe\"</span>,<br>  language : <span class=\"jsstringcolor\">\"EN\"</span><br>};<br><br><span class=\"commentcolor\">// Change the \"language\" Property<br></span>Object.<span class=\"jspropertycolor\">defineProperty</span>(person, <span class=\"jsstringcolor\">\"language\"</span>, {enumerable:<span class=\"jskeywordcolor\">false</span>});<br><br><span class=\"commentcolor\">// Get all Enumerable Properties<br></span>Object.<span class=\"jspropertycolor\">keys</span>(person);</span></div>\n</div>\n<div class=\"w3-note\">\n<h2><span>Ghi chú</span></h2>\n<p><span>Phương thức getOwnPropertyNames() trả về tất cả các thuộc tính.</span></p>\n<p><span>Phương thức Object.keys() trả về tất cả các thuộc tính có thể liệt kê được.</span></p>\n<p><span>Nếu bạn định nghĩa thuộc tính đối tượng mà không có </span><strong><span>enumerable:false</span></strong><span> thì hai phương thức sẽ trả về cùng một kết quả.</span></p>\n</div>\n<hr>\n<h2><span>Thêm Getter và Setter</span></h2>\n<p><span>Phương pháp này </span><code class=\"w3-codespan\">Object.defineProperty()</code><span>cũng có thể được sử dụng để thêm Getter và Setter:</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">//Create an object<br></span><span class=\"jskeywordcolor\">const</span> person = {firstName:<span class=\"jsstringcolor\">\"John\"</span>, lastName:<span class=\"jsstringcolor\">\"Doe\"</span>};<br><br><span class=\"commentcolor\">// Define a getter<br></span>Object.<span class=\"jspropertycolor\">defineProperty</span>(person, <span class=\"jsstringcolor\">\"fullName\"</span>, {<br>  get: <span class=\"jskeywordcolor\">function</span> () {<span class=\"jskeywordcolor\">return</span> <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">firstName</span> + <span class=\"jsstringcolor\">\" \"</span> + <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">lastName</span>;}<br>});</span></div>\n</div>\n<hr>\n<h2><span>Một ví dụ phản biện</span></h2>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"commentcolor\">// Define object<br></span><span class=\"jskeywordcolor\">const</span> obj = {counter:<span class=\"jsnumbercolor\">0</span>};<br><br><span class=\"commentcolor\">// Define setters<br></span>Object.<span class=\"jspropertycolor\">defineProperty</span>(obj, <span class=\"jsstringcolor\">\"reset\"</span>, {<br>  get : <span class=\"jskeywordcolor\">function</span> () {<span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">counter</span> = <span class=\"jsnumbercolor\">0</span>;}<br>});<br>Object.<span class=\"jspropertycolor\">defineProperty</span>(obj, <span class=\"jsstringcolor\">\"increment\"</span>, {<br>  get : <span class=\"jskeywordcolor\">function</span> () {<span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">counter</span>++;}<br>});<br>Object.<span class=\"jspropertycolor\">defineProperty</span>(obj, <span class=\"jsstringcolor\">\"decrement\"</span>, {<br>  get : <span class=\"jskeywordcolor\">function</span> () {<span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">counter</span>--;}<br>});<br>Object.<span class=\"jspropertycolor\">defineProperty</span>(obj, <span class=\"jsstringcolor\">\"add\"</span>, {<br>  set : <span class=\"jskeywordcolor\">function</span> (value) {<span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">counter</span> += value;}<br>});<br>Object.<span class=\"jspropertycolor\">defineProperty</span>(obj, <span class=\"jsstringcolor\">\"subtract\"</span>, {<br>  set : <span class=\"jskeywordcolor\">function</span> (i) {<span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">counter</span> -= i;}<br>});<br><br><span class=\"commentcolor\">// Play with the counter:<br></span>obj.<span class=\"jspropertycolor\">reset</span>;<br>obj.<span class=\"jspropertycolor\">add</span> = <span class=\"jsnumbercolor\">5</span>;<br>obj.<span class=\"jspropertycolor\">subtract</span> = <span class=\"jsnumbercolor\">1</span>;<br>obj.<span class=\"jspropertycolor\">increment</span>;<br>obj.<span class=\"jspropertycolor\">decrement</span>;<br></span></div>\n</div>\n<hr>\n<h2><span>Thuộc tính nguyên mẫu</span></h2>\n<p><span>Các đối tượng JavaScript kế thừa các thuộc tính của nguyên mẫu của chúng.</span></p>\n<p><span>Từ khóa này </span><code class=\"w3-codespan\">delete</code><span>không xóa các thuộc tính được kế thừa, nhưng nếu bạn xóa một thuộc tính nguyên mẫu, nó sẽ ảnh hưởng đến tất cả các đối tượng được kế thừa từ nguyên mẫu.</span></p>\n<hr>\n<div class=\"w3-note\">\n<h2><span>Tham chiếu đối tượng đầy đủ</span></h2>\n<p><span>Để có thông tin tham khảo đầy đủ, hãy truy cập:</span></p>\n<p><span>Tài liệu tham khảo này chứa các mô tả và ví dụ về tất cả Thuộc tính và Phương thức của Đối tượng.</span></p>\n</div>",
            "image": "https://LittleNakiri.github.io/SkibidiBlog/media/posts/8/javascript-object-cover.png",
            "author": {
                "name": "Ninh Khắc Duy"
            },
            "tags": [
            ],
            "date_published": "2024-12-30T23:29:05+07:00",
            "date_modified": "2024-12-30T23:29:05+07:00"
        },
        {
            "id": "https://LittleNakiri.github.io/SkibidiBlog/nguyen-mau-doi-tuong-javascript.html",
            "url": "https://LittleNakiri.github.io/SkibidiBlog/nguyen-mau-doi-tuong-javascript.html",
            "title": "Nguyên mẫu đối tượng JavaScript",
            "summary": "Tất cả các đối tượng JavaScript đều kế thừa các thuộc tính&hellip;",
            "content_html": "<p class=\"intro\"><span>Tất cả các đối tượng JavaScript đều kế thừa các thuộc tính và phương thức từ nguyên mẫu.</span></p>\n<hr>\n<p><span>Ở chương trước chúng ta đã học cách sử dụng </span><strong><span>hàm tạo đối tượng</span></strong><span> :</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<p> </p>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"jskeywordcolor\">function</span> Person(first, last, age, eyecolor) {<br>  <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">firstName</span> = first;<br>  <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">lastName</span> = last;<br>  <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">age</span> = age;<br>  <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">eyeColor</span> = eyecolor;<br>}<br><br><span class=\"jskeywordcolor\">const</span> myFather = <span class=\"jskeywordcolor\">new</span> Person(<span class=\"jsstringcolor\">\"John\"</span>, <span class=\"jsstringcolor\">\"Doe\"</span>, <span class=\"jsnumbercolor\">50</span>, <span class=\"jsstringcolor\">\"blue\"</span>);<br><span class=\"jskeywordcolor\">const</span> myMother = <span class=\"jskeywordcolor\">new</span> Person(<span class=\"jsstringcolor\">\"Sally\"</span>, <span class=\"jsstringcolor\">\"Rally\"</span>, <span class=\"jsnumbercolor\">48</span>, <span class=\"jsstringcolor\">\"green\"</span>);</span></div>\n</div>\n<p><span>Chúng ta cũng biết rằng bạn </span><strong><span>không</span></strong><span> thể thêm thuộc tính mới vào hàm tạo đối tượng hiện có:</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\">Person.<span class=\"jspropertycolor\">nationality</span> = <span class=\"jsstringcolor\">\"English\"</span>;</span></div>\n</div>\n<p><span>Để thêm một thuộc tính mới vào hàm tạo, bạn phải thêm thuộc tính đó vào hàm tạo:</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"jskeywordcolor\">function</span> Person(first, last, age, eyecolor) {<br>  <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">firstName</span> = first;<br>  <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">lastName</span> = last;<br>  <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">age</span> = age;<br>  <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">eyeColor</span> = eyecolor;<br>  <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">nationality</span> = <span class=\"jsstringcolor\">\"English\"</span>;<br>}</span></div>\n</div>\n<div id=\"midcontentadcontainer\">\n<div id=\"adngin-mid_content-0\" data-google-query-id=\"CKCHu6zzz4oDFV5HnQkdzTU6Sw\">\n<div id=\"sn_ad_label_adngin-mid_content-0\" class=\"sn_ad_label\"></div>\n<div id=\"google_ads_iframe_/22152718,16833175/sws-hb//w3schools.com//mid_content_0__container__\"></div>\n</div>\n</div>\n<hr>\n<h2><span>Kế thừa nguyên mẫu</span></h2>\n<p><span>Tất cả các đối tượng JavaScript đều kế thừa các thuộc tính và phương thức từ nguyên mẫu:</span></p>\n<ul>\n<li><code class=\"w3-codespan\">Date</code><span>các đối tượng kế thừa từ</span><code class=\"w3-codespan\">Date.prototype</code></li>\n<li><code class=\"w3-codespan\">Array</code><span>các đối tượng kế thừa từ</span><code class=\"w3-codespan\">Array.prototype</code></li>\n<li><code class=\"w3-codespan\">Person</code><span>các đối tượng kế thừa từ</span><code class=\"w3-codespan\">Person.prototype</code></li>\n</ul>\n<p><span>Đây </span><code class=\"w3-codespan\">Object.prototype</code><span>là phần trên cùng của chuỗi thừa kế nguyên mẫu:</span></p>\n<p><code class=\"w3-codespan\">Date</code><span>đối tượng, </span><code class=\"w3-codespan\">Array</code><span>đối tượng và </span><code class=\"w3-codespan\">Person</code><span>đối tượng kế thừa từ </span><code class=\"w3-codespan\">Object.prototype</code><span>.</span></p>\n<hr>\n<h2><span>Thêm Thuộc tính và Phương pháp vào Đối tượng</span></h2>\n<p><span>Đôi khi bạn muốn thêm thuộc tính (hoặc phương thức) mới vào tất cả các đối tượng hiện có của một kiểu nhất định.</span></p>\n<p><span>Đôi khi bạn muốn thêm thuộc tính (hoặc phương thức) mới vào hàm tạo đối tượng.</span></p>\n<hr>\n<h2><span>Sử dụng thuộc tính </span><strong><span>nguyên mẫu</span></strong></h2>\n<p><span>Thuộc tính JavaScript </span><code class=\"w3-codespan\">prototype</code><span>cho phép bạn thêm thuộc tính mới vào hàm tạo đối tượng:</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"jskeywordcolor\">function</span> Person(first, last, age, eyecolor) {<br>  <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">firstName</span> = first;<br>  <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">lastName</span> = last;<br>  <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">age</span> = age;<br>  <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">eyeColor</span> = eyecolor;<br>}<br><br>Person.<span class=\"jspropertycolor\">prototype</span>.<span class=\"jspropertycolor\">nationality</span> = <span class=\"jsstringcolor\">\"English\"</span>;</span></div>\n</div>\n<p><span>Thuộc tính JavaScript </span><code class=\"w3-codespan\">prototype</code><span>cũng cho phép bạn thêm các phương thức mới vào hàm tạo đối tượng:</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\"><span class=\"jskeywordcolor\">function</span> Person(first, last, age, eyecolor) {<br>  <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">firstName</span> = first;<br>  <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">lastName</span> = last;<br>  <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">age</span> = age;<br>  <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">eyeColor</span> = eyecolor;<br>}<br><br>Person.<span class=\"jspropertycolor\">prototype</span>.<span class=\"jspropertycolor\">name</span> = <span class=\"jskeywordcolor\">function</span>() {<br>  <span class=\"jskeywordcolor\">return</span> <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">firstName</span> + <span class=\"jsstringcolor\">\" \"</span> + <span class=\"jskeywordcolor\">this</span>.<span class=\"jspropertycolor\">lastName</span>;<br>};</span></div>\n</div>\n<div class=\"w3-panel w3-warning\"> </div>",
            "image": "https://LittleNakiri.github.io/SkibidiBlog/media/posts/7/maxresdefault.jpg",
            "author": {
                "name": "Ninh Khắc Duy"
            },
            "tags": [
            ],
            "date_published": "2024-12-30T23:23:47+07:00",
            "date_modified": "2024-12-30T23:23:47+07:00"
        },
        {
            "id": "https://LittleNakiri.github.io/SkibidiBlog/tu-khoa-java.html",
            "url": "https://LittleNakiri.github.io/SkibidiBlog/tu-khoa-java.html",
            "title": "Từ khóa Java",
            "summary": "Từ khóa dành riêng của Java Java có một tập hợp các&hellip;",
            "content_html": "<h1> </h1>\n<hr>\n<h2><span>Từ khóa dành riêng của Java</span></h2>\n<p><span>Java có một tập hợp các từ khóa là những từ dành riêng không thể được sử dụng làm biến, phương thức, lớp hoặc bất kỳ định danh nào khác:</span></p>\n<table class=\"ws-table-all notranslate\">\n<tbody>\n<tr>\n<th>Keyword</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_abstract.asp\">abstract</a></td>\n<td>A non-access modifier. Used for classes and methods: An abstract class cannot be used to create objects (to access it, it must be inherited from another class). An abstract method can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from)</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_assert.asp\">assert</a></td>\n<td>For debugging</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_boolean.asp\">boolean</a></td>\n<td>A data type that can only store true or false values</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_break.asp\">break</a></td>\n<td>Breaks out of a loop or a switch block</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_byte.asp\">byte</a></td>\n<td>A data type that can store whole numbers from -128 and 127</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_case.asp\">case</a></td>\n<td>Marks a block of code in switch statements</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_catch.asp\">catch</a></td>\n<td>Catches exceptions generated by try statements</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_char.asp\">char</a></td>\n<td>A data type that is used to store a single character</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_class.asp\">class</a></td>\n<td>Defines a class</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_continue.asp\">continue</a></td>\n<td>Continues to the next iteration of a loop</td>\n</tr>\n<tr>\n<td>const</td>\n<td>Defines a constant. <span class=\"deprecated\">Not in use</span> - use <a href=\"https://www.w3schools.com/java/ref_keyword_final.asp\">final</a> instead</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_default.asp\">default</a></td>\n<td>Specifies the default block of code in a switch statement</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_do.asp\">do</a></td>\n<td>Used together with while to create a do-while loop</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_double.asp\">double</a></td>\n<td>A data type that can store fractional numbers from 1.7e−308 to 1.7e+308</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_else.asp\">else</a></td>\n<td>Used in conditional statements</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_enum.asp\">enum</a></td>\n<td>Declares an enumerated (unchangeable) type</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_exports.asp\">exports</a></td>\n<td>Exports a package with a module. New in Java 9</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_extends.asp\">extends</a></td>\n<td>Extends a class (indicates that a class is inherited from another class)</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_final.asp\">final</a></td>\n<td>A non-access modifier used for classes, attributes and methods, which makes them non-changeable (impossible to inherit or override)</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_finally.asp\">finally</a></td>\n<td>Used with exceptions, a block of code that will be executed no matter if there is an exception or not</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_float.asp\">float</a></td>\n<td>A data type that can store fractional numbers from 3.4e−038 to 3.4e+038</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_for.asp\">for</a></td>\n<td>Create a for loop</td>\n</tr>\n<tr>\n<td>goto</td>\n<td><span class=\"deprecated\">Not in use, and has no function</span></td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_if.asp\">if</a></td>\n<td>Makes a conditional statement</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_implements.asp\">implements</a></td>\n<td>Implements an interface</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_import.asp\">import</a></td>\n<td>Used to import a package, class or interface</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_instanceof.asp\">instanceof</a></td>\n<td>Checks whether an object is an instance of a specific class or an interface</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_int.asp\">int</a></td>\n<td>A data type that can store whole numbers from -2147483648 to 2147483647</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_interface.asp\">interface</a></td>\n<td>Used to declare a special type of class that only contains abstract methods</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_long.asp\">long</a></td>\n<td>A data type that can store whole numbers from -9223372036854775808 to 9223372036854775808</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_module.asp\">module</a></td>\n<td>Declares a module. New in Java 9</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_native.asp\">native</a></td>\n<td>Specifies that a method is not implemented in the same Java source file (but in another language)</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_new.asp\">new</a></td>\n<td>Creates new objects</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_package.asp\">package</a></td>\n<td>Declares a package</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_private.asp\">private</a></td>\n<td>An access modifier used for attributes, methods and constructors, making them only accessible within the declared class</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_protected.asp\">protected</a></td>\n<td>An access modifier used for attributes, methods and constructors, making them accessible in the same package and subclasses</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_public.asp\">public</a></td>\n<td>An access modifier used for classes, attributes, methods and constructors, making them accessible by any other class</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_requires.asp\">requires</a></td>\n<td>Specifies required libraries inside a module. New in Java 9</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_return.asp\">return</a></td>\n<td>Finished the execution of a method, and can be used to return a value from a method</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_short.asp\">short</a></td>\n<td>A data type that can store whole numbers from -32768 to 32767</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_static.asp\">static</a></td>\n<td>A non-access modifier used for methods and attributes. Static methods/attributes can be accessed without creating an object of a class</td>\n</tr>\n<tr>\n<td>strictfp</td>\n<td><span class=\"deprecated\">Obsolete</span>. Restrict the precision and rounding of floating point calculations</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_super.asp\">super</a></td>\n<td>Refers to superclass (parent) objects</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_switch.asp\">switch</a></td>\n<td>Selects one of many code blocks to be executed</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_synchronized.asp\">synchronized</a></td>\n<td>A non-access modifier, which specifies that methods can only be accessed by one thread at a time</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_this.asp\">this</a></td>\n<td>Refers to the current object in a method or constructor</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_throw.asp\">throw</a></td>\n<td>Creates a custom error</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_throws.asp\">throws</a></td>\n<td>Indicates what exceptions may be thrown by a method</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_transient.asp\">transient</a></td>\n<td>Used to ignore an attribute when serializing an object</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_try.asp\">try</a></td>\n<td>Creates a try...catch statement</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_var.asp\">var</a></td>\n<td>Declares a variable. New in Java 10</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_void.asp\">void</a></td>\n<td>Specifies that a method should not have a return value</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_volatile.asp\">volatile</a></td>\n<td>Indicates that an attribute is not cached thread-locally, and is always read from the \"main memory\"</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3schools.com/java/ref_keyword_while.asp\">while</a></td>\n<td>Creates a while loop</td>\n</tr>\n</tbody>\n</table>\n<p><strong><span>Lưu ý:</span></strong> <code class=\"w3-codespan\">true</code><span> , </span><code class=\"w3-codespan\">false</code><span>, và </span><code class=\"w3-codespan\">null</code><span>không phải là từ khóa, nhưng chúng là các từ theo nghĩa đen và từ dành riêng không thể được sử dụng làm định danh.</span></p>",
            "image": "https://LittleNakiri.github.io/SkibidiBlog/media/posts/6/list-of-java-keywords-66e2956014bc7.webp",
            "author": {
                "name": "Ninh Khắc Duy"
            },
            "tags": [
            ],
            "date_published": "2024-12-30T23:19:29+07:00",
            "date_modified": "2024-12-30T23:19:29+07:00"
        },
        {
            "id": "https://LittleNakiri.github.io/SkibidiBlog/java-threads.html",
            "url": "https://LittleNakiri.github.io/SkibidiBlog/java-threads.html",
            "title": "Java Threads",
            "summary": "Luồng Java Luồng cho phép chương trình hoạt động hiệu quả hơn&hellip;",
            "content_html": "<h2><span>Luồng Java</span></h2>\n<p><span>Luồng cho phép chương trình hoạt động hiệu quả hơn bằng cách thực hiện nhiều việc cùng một lúc.</span></p>\n<p><span>Luồng có thể được sử dụng để thực hiện các tác vụ phức tạp trong nền mà không làm gián đoạn chương trình chính.</span></p>\n<hr>\n<h2><span>Tạo một chủ đề</span></h2>\n<p><span>Có hai cách để tạo chủ đề.</span></p>\n<p><span>Nó có thể được tạo ra bằng cách mở rộng </span><code class=\"w3-codespan\">Thread</code><span>lớp và ghi đè </span><code class=\"w3-codespan\">run()</code><span> phương thức của nó:</span></p>\n<div class=\"w3-example\">\n<h3><span>Mở rộng cú pháp</span></h3>\n<pre class=\"w3-white language-java\" tabindex=\"0\"><code>public class Main extends Thread {\n  public void run() {\n    System.out.println(\"This code is running in a thread\");\n  } \n}</code></pre>\n</div>\n<p><span>Một cách khác để tạo luồng là triển khai </span><code class=\"w3-codespan\">Runnable</code><span>giao diện:</span></p>\n<div class=\"w3-example\">\n<h3><span>Thực hiện cú pháp</span></h3>\n<pre class=\"w3-white language-java\" tabindex=\"0\"><code>public class Main implements Runnable {\n  public void run() {\n    System.out.println(\"This code is running in a thread\");\n  }\n}</code></pre>\n</div>\n<hr>\n<h2><span>Chủ đề đang chạy</span></h2>\n<p><span>Nếu lớp mở rộng </span><code class=\"w3-codespan\">Thread</code><span>lớp, luồng có thể được chạy bằng cách tạo một thể hiện của lớp và gọi </span><code class=\"w3-codespan\">start()</code><span>phương thức của nó:</span></p>\n<div class=\"w3-example\">\n<h3><span>Mở rộng ví dụ</span></h3>\n<pre class=\"w3-white language-java\" tabindex=\"0\"><code>public class Main extends Thread {\n  public static void main(String[] args) {\n    Main thread = new Main();\n    thread.start();\n    System.out.println(\"This code is outside of the thread\");\n  }\n  public void run() {\n    System.out.println(\"This code is running in a thread\");\n  }\n}</code></pre>\n</div>\n<p><span>Nếu lớp triển khai </span><code class=\"w3-codespan\">Runnable</code><span>giao diện, luồng có thể được chạy bằng cách truyền một thể hiện của lớp tới hàm </span><code class=\"w3-codespan\">Thread</code><span>tạo của đối tượng, sau đó gọi phương thức của luồng </span><code class=\"w3-codespan\">start()</code><span>:</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ thực hiện</span></h3>\n<pre class=\"w3-white language-java\" tabindex=\"0\"><code>public class Main implements Runnable {\n  public static void main(String[] args) {\n    Main obj = new Main();\n    Thread thread = new Thread(obj);\n    thread.start();\n    System.out.println(\"This code is outside of the thread\");\n  }\n  public void run() {\n    System.out.println(\"This code is running in a thread\");\n  }\n}</code></pre>\n</div>\n<div class=\"w3-note w3-panel\">\n<p><strong><span>Sự khác biệt giữa \"mở rộng\" và \"triển khai\" Luồng</span></strong></p>\n<p><span>Sự khác biệt chính là khi một lớp mở rộng lớp Thread, bạn không thể mở rộng bất kỳ lớp nào khác, nhưng bằng cách triển khai giao diện Runnable, bạn cũng có thể mở rộng từ một lớp khác, như: class </span><code class=\"w3-codespan\">MyClass extends OtherClass implements Runnable</code><span>.</span></p>\n</div>\n<hr>\n<h2><span>Các vấn đề đồng thời</span></h2>\n<p><span>Vì các luồng chạy cùng lúc với các phần khác của chương trình nên không có cách nào để biết mã sẽ chạy theo thứ tự nào. Khi các luồng và chương trình chính đọc và ghi cùng một biến, các giá trị là không thể đoán trước. Các vấn đề phát sinh từ điều này được gọi là các vấn đề đồng thời.</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<p><span>Một ví dụ mã trong đó giá trị của biến </span><strong><span>amount</span></strong><span> là không thể đoán trước:</span></p>\n<pre class=\"w3-white language-java\" tabindex=\"0\"><code>public class Main extends Thread {\n  public static int amount = 0;\n\n  public static void main(String[] args) {\n    Main thread = new Main();\n    thread.start();\n    System.out.println(amount);\n    amount++;\n    System.out.println(amount);\n  } } }\n\n  public void run() {\n    amount++;\n  \n</code></pre>\n</div>\n<p><span>Để tránh các vấn đề đồng thời, tốt nhất là chia sẻ càng ít thuộc tính giữa các luồng càng tốt. Nếu cần chia sẻ các thuộc tính, một giải pháp khả thi là sử dụng phương </span><code class=\"w3-codespan\">isAlive()</code><span> thức của luồng để kiểm tra xem luồng đã chạy xong chưa trước khi sử dụng bất kỳ thuộc tính nào mà luồng có thể thay đổi.</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ</span></h3>\n<p><span>Sử dụng </span><code class=\"w3-codespan\">isAlive()</code><span>để ngăn ngừa các vấn đề đồng thời:</span></p>\n<pre class=\"w3-white language-java\" tabindex=\"0\"><code>public class Main extends Thread {\n  public static int amount = 0;\n\n  public static void main(String[] args) {\n    Main thread = new Main();\n    thread.start();\n    // Wait for the thread to finish\n    while(thread.isAlive()) {\n      System.out.println(\"Waiting...\");\n    } } } }\n    // Update amount and print its value\n    System.out.println(\"Main: \" + amount);\n    amount++;\n    System.out.println(\"Main: \" + amount);\n  \n  public void run() {\n    amount++;\n  </code></pre>\n</div>",
            "image": "https://LittleNakiri.github.io/SkibidiBlog/media/posts/5/1_CRwBFK3fJl6ntmdQ6hEsVQ.jpg",
            "author": {
                "name": "Ninh Khắc Duy"
            },
            "tags": [
            ],
            "date_published": "2024-12-30T23:17:34+07:00",
            "date_modified": "2024-12-30T23:17:34+07:00"
        },
        {
            "id": "https://LittleNakiri.github.io/SkibidiBlog/ke-thua-java.html",
            "url": "https://LittleNakiri.github.io/SkibidiBlog/ke-thua-java.html",
            "title": "Kế thừa Java",
            "summary": "Kế thừa Java (Lớp con và lớp cha) Trong Java, có thể&hellip;",
            "content_html": "<h1> </h1>\n<h2><span>Kế thừa Java (Lớp con và lớp cha)</span></h2>\n<p><span>Trong Java, có thể kế thừa các thuộc tính và phương thức từ lớp này sang lớp khác. Chúng tôi nhóm \"khái niệm kế thừa\" thành hai loại:</span></p>\n<ul>\n<li><strong><span>lớp con</span></strong><span> (lớp con) - lớp kế thừa từ lớp khác</span></li>\n<li><strong><span>siêu lớp</span></strong><span> (cha mẹ) - lớp được kế thừa từ</span></li>\n</ul>\n<p><span>Để kế thừa từ một lớp, hãy sử dụng </span><code class=\"w3-codespan\">extends</code><span> từ khóa.</span></p>\n<p><span>Trong ví dụ dưới đây, </span><code class=\"w3-codespan\">Car</code><span>lớp (lớp con) kế thừa các thuộc tính và phương thức từ </span><code class=\"w3-codespan\">Vehicle</code><span>lớp (lớp siêu cấp):</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ:</span></h3>\n<pre class=\"w3-white language-java\" tabindex=\"0\" data-line=\"8\"><code>class Vehicle {\n  protected String brand = \"Ford\";        // Vehicle attribute\n  public void honk() {                    // Vehicle method\n    System.out.println(\"Tuut, tuut!\");\n  }\n}\n\nclass Car extends Vehicle {\n  private String modelName = \"Mustang\";    // Car attribute\n  public static void main(String[] args) {\n\n    // Create a myCar object\n    Car myCar = new Car();\n\n    // Call the honk() method (from the Vehicle class) on the myCar object\n    myCar.honk();\n\n    // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class\n    System.out.println(myCar.brand + \" \" + myCar.modelName);\n  }\n}</code></pre>\n</div>\n<div class=\"w3-note w3-panel\">\n<p><span>Bạn có để ý đến </span><code class=\"w3-codespan\">protected</code><span>trình sửa đổi trong Vehicle không?</span></p>\n<p><span>Chúng tôi đặt thuộc tính </span><strong><span>thương hiệu</span></strong><span> trong </span><strong><span>Vehicle</span></strong><span> thành một </span><code class=\"w3-codespan\">protected</code> <a href=\"https://www.w3schools.com/java/java_modifiers.asp\"><span>trình sửa đổi quyền truy cập</span></a><span> . Nếu nó được đặt thành </span><code class=\"w3-codespan\">private</code><span>, lớp Car sẽ không thể truy cập được.</span></p>\n<h4><span>Tại sao và khi nào nên sử dụng \"Inheritance\"?</span></h4>\n<p><span>- Hữu ích cho khả năng tái sử dụng mã: tái sử dụng các thuộc tính và phương thức của một lớp hiện có khi bạn tạo một lớp mới.</span></p>\n<p><strong><span>Mẹo:</span></strong><span> Bạn cũng có thể tham khảo chương tiếp theo, </span><a href=\"https://www.w3schools.com/java/java_polymorphism.asp\"><span>Đa hình</span></a><span> , chương này sử dụng các phương thức kế thừa để thực hiện các tác vụ khác nhau.</span></p>\n</div>\n<hr>\n<div id=\"midcontentadcontainer\">\n<div id=\"adngin-mid_content-0\" data-google-query-id=\"CL3Uk5Hwz4oDFRdgnQkdwdYHTQ\">\n<div id=\"sn_ad_label_adngin-mid_content-0\" class=\"sn_ad_label\"></div>\n</div>\n</div>\n<h2><span>Từ khóa cuối cùng</span></h2>\n<p><span>Nếu bạn không muốn các lớp khác kế thừa từ một lớp, hãy sử dụng </span><code class=\"w3-codespan\">final</code><span>từ khóa:</span></p>\n<div class=\"w3-example w3-pale-red\">\n<p><span>Nếu bạn cố gắng truy cập một </span><code class=\"w3-codespan\">final</code><span>lớp, Java sẽ tạo ra lỗi:</span></p>\n<pre class=\"w3-white w3-border-red language-java\" tabindex=\"0\"><code>final class Vehicle {\n  ...\n}\n\nclass Car extends Vehicle {\n  ...\n}\n</code></pre>\n<p><span>Kết quả đầu ra sẽ tương tự như thế này:</span></p>\n<div class=\"w3-padding notranslate w3-black\"><code>Main.java:9: error: cannot inherit from final Vehicle<br>class Main extends Vehicle {<br>                  ^<br>1 error)</code></div>\n</div>",
            "image": "https://LittleNakiri.github.io/SkibidiBlog/media/posts/4/hq720.jpg",
            "author": {
                "name": "Ninh Khắc Duy"
            },
            "tags": [
            ],
            "date_published": "2024-12-30T23:09:37+07:00",
            "date_modified": "2024-12-30T23:09:37+07:00"
        },
        {
            "id": "https://LittleNakiri.github.io/SkibidiBlog/java-enum.html",
            "url": "https://LittleNakiri.github.io/SkibidiBlog/java-enum.html",
            "title": "Java Enum",
            "summary": "Enum An enumlà một \"lớp\" đặc biệt biểu diễn một nhóm các hằng số (các&hellip;",
            "content_html": "<h2>Enum</h2>\n<p>An <code class=\"w3-codespan\">enum</code>là một \"lớp\" đặc biệt biểu diễn một nhóm <strong>các hằng số</strong> (các biến không thể thay đổi, như <code class=\"w3-codespan\">final</code>biến số).</p>\n<p>Để tạo một <code class=\"w3-codespan\">enum</code>, hãy sử dụng <code class=\"w3-codespan\">enum</code>từ khóa (thay vì class hoặc interface) và phân tách các hằng số bằng dấu phẩy. Lưu ý rằng chúng phải được viết hoa:</p>\n<div class=\"w3-example\">\n<h3>Ví dụ:</h3>\n<pre class=\"w3-white language-java\" tabindex=\"0\"><code>enum Level {\n  LOW,\n  MEDIUM,\n  HIGH\n}\n</code></pre>\n<p>Bạn có thể truy cập <code class=\"w3-codespan\">enum</code>hằng số bằng cú pháp <strong>dấu chấm</strong> :</p>\n<div class=\"w3-code notranslate javaHigh\"><span class=\"javacolor\">Level myVar = Level.<span class=\"javapropertycolor\">MEDIUM</span>;</span></div>\n</div>\n<div class=\"w3-note w3-panel\">\n<p><strong>Enum</strong> là viết tắt của \"enumerations\", có nghĩa là \"được liệt kê cụ thể\".</p>\n</div>\n<hr>\n<h2>Enum bên trong một lớp</h2>\n<p>Bạn cũng có thể có <code class=\"w3-codespan\">enum</code>bên trong một lớp:</p>\n<div class=\"w3-example\">\n<h3>Ví dụ:</h3>\n<pre class=\"w3-white language-java\" tabindex=\"0\"><code>public class Main {\n  enum Level {\n    LOW,\n    MEDIUM,\n    HIGH\n  }\n\n  public static void main(String[] args) {\n    Level myVar = Level.MEDIUM; \n    System.out.println(myVar);\n  }\n}\n</code></pre>\n<p>Đầu ra sẽ là:</p>\n<div class=\"w3-padding notranslate w3-black w3-margin-top w3-margin-bottom\"><code>MEDIUM</code></div>\n</div>\n<hr>\n<h2>Enum trong câu lệnh Switch</h2>\n<p>Enum thường được sử dụng trong <code class=\"w3-codespan\">switch</code>các câu lệnh để kiểm tra các giá trị tương ứng:</p>\n<div class=\"w3-example\">\n<h3>Ví dụ:</h3>\n<pre class=\"w3-white language-java\" tabindex=\"0\"><code>enum Level {\n  LOW,\n  MEDIUM,\n  HIGH\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    Level myVar = Level.MEDIUM;\n\n    switch(myVar) {\n      case LOW:\n        System.out.println(\"Low level\");\n        break;\n      case MEDIUM:\n         System.out.println(\"Medium level\");\n        break;\n      case HIGH:\n        System.out.println(\"High level\");\n        break;\n    }\n  }\n}\n</code></pre>\n<p>Đầu ra sẽ là:</p>\n<div class=\"w3-padding notranslate w3-black w3-margin-top w3-margin-bottom\"><code>Medium level</code></div>\n</div>\n<h2>Lặp qua một Enum</h2>\n<p>Kiểu enum có một <code class=\"w3-codespan\">values()</code>phương thức trả về một mảng tất cả các hằng số enum. Phương thức này hữu ích khi bạn muốn lặp qua các hằng số của một enum:</p>\n<div class=\"w3-example\">\n<h3>Ví dụ:</h3>\n<pre class=\"w3-white language-java\" tabindex=\"0\"><code>for (Level myVar : Level.values()) {\n  System.out.println(myVar);\n}\n</code></pre>\n<p>Đầu ra sẽ là:</p>\n<div class=\"w3-padding notranslate w3-black w3-margin-top w3-margin-bottom\"><code>LOW<br>MEDIUM<br>HIGH</code></div>\n<a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/java/tryjava.asp?filename=demo_enums_loop\" rel=\"noopener\">Hãy tự mình thử »</a></div>\n<div class=\"w3-note w3-panel\"> </div>",
            "image": "https://LittleNakiri.github.io/SkibidiBlog/media/posts/3/properties-of-Enum-1.jpg",
            "author": {
                "name": "Ninh Khắc Duy"
            },
            "tags": [
            ],
            "date_published": "2024-12-30T23:05:48+07:00",
            "date_modified": "2024-12-30T23:06:08+07:00"
        },
        {
            "id": "https://LittleNakiri.github.io/SkibidiBlog/giao-dien-java.html",
            "url": "https://LittleNakiri.github.io/SkibidiBlog/giao-dien-java.html",
            "title": "Giao diện Java",
            "summary": "Giao diện Một cách khác để đạt được tính trừu tượng trong Java là&hellip;",
            "content_html": "<h2><span>Giao diện</span></h2>\n<p><span>Một cách khác để đạt được </span><a href=\"https://www.w3schools.com/java/java_abstract.asp\"><span>tính trừu tượng</span></a><span> trong Java là sử dụng giao diện.</span></p>\n<p><span>An </span><code class=\"w3-codespan\">interface</code><span>là một \" </span><strong><span>lớp trừu tượng</span></strong><span> \" hoàn toàn được sử dụng để nhóm các phương thức liên quan với nhau bằng các phần tử rỗng:</span></p>\n<div class=\"w3-example\">\n<h3><span>Ví dụ:</span></h3>\n<pre class=\"w3-white language-java\" tabindex=\"0\" data-line=\"2\"><code>// interface\ninterface Animal {\n  public void animalSound(); // interface method (does not have a body)\n  public void run(); // interface method (does not have a body)\n}</code></pre>\n</div>\n<p><span>Để truy cập các phương thức giao diện, giao diện phải được \"triển khai\" (giống như kế thừa) bởi một lớp khác bằng </span><code class=\"w3-codespan\">implements</code><span> từ khóa (thay vì </span><code class=\"w3-codespan\">extends</code><span>). Thân của phương thức giao diện được cung cấp bởi lớp \"triển khai\":</span></p>\n<h3><span>Ví dụ:</span></h3>\n<pre class=\"w3-white language-java\" tabindex=\"0\" data-line=\"2,8\"><code>// Interface\ninterface Animal {\n  public void animalSound(); // interface method (does not have a body)\n  public void sleep(); // interface method (does not have a body)\n}\n\n// Pig \"implements\" the Animal interface\nclass Pig implements Animal {\n  public void animalSound() {\n    // The body of animalSound() is provided here\n    System.out.println(\"The pig says: wee wee\");\n  }\n  public void sleep() {\n    // The body of sleep() is provided here\n    System.out.println(\"Zzz\");\n  }\n}\n\nclass Main {\n  public static void main(String[] args) {\n    Pig myPig = new Pig();  // Create a Pig object\n    myPig.animalSound();\n    myPig.sleep();\n  }\n}</code></pre>",
            "image": "https://LittleNakiri.github.io/SkibidiBlog/media/posts/2/2022_06_Interface-in-Java.jpg",
            "author": {
                "name": "Ninh Khắc Duy"
            },
            "tags": [
            ],
            "date_published": "2024-12-30T23:03:08+07:00",
            "date_modified": "2024-12-30T23:03:08+07:00"
        }
    ]
}
